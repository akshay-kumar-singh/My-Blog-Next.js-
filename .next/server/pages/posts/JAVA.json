{"pageProps":{"post":{"slug":"JAVA","title":"Important JAVA question","excerpt":"Java is the most important programming language. You probably don't know it well enough!","image":"java.png","isFeatured":false,"date":"2024-08-21","content":"\r\n**1.what is java ?**\r\n\r\n**Java is a high-level, object-oriented programming language known for its platform independence, as code written in Java can run on any device with a Java Virtual Machine (JVM). It's designed to be portable, secure, and robust, making it widely used in various domains, including software development, web applications, mobile apps, and more.**\r\n\r\n**2.why java is not 100% object oriented ?**\r\n\r\n**Java is considered mostly object-oriented, but it's not entirely 100% object-oriented due to the following reasons:**\r\n\r\n**Primitive Data Types: Java includes primitive data types (int, double, boolean, etc.) that are not objects. These types do not inherit from a common class and don't have behavior or methods associated with them.**\r\n\r\n**Static Members: Java supports static methods and variables that belong to a class rather than to instances of the class. Static members are not associated with objects and can be accessed without object instantiation, deviating from pure object-oriented principles.**\r\n\r\n**These aspects introduce a level of deviation from complete object-oriented purity in Java. However, the language primarily follows object-oriented paradigms by emphasizing object creation, encapsulation, inheritance, and polymorphism.**\r\n\r\n**3.Why pointer are not used in java ?**\r\n\r\n**Pointers are not used in Java mainly for two reasons:**\r\n\r\n**Safety and Security: Pointers in languages like C and C++ allow direct memory manipulation, which can lead to issues like memory leaks, dangling pointers, and unauthorized access to memory locations. Java was designed to prioritize safety and security by implementing automatic memory management through the use of a garbage collector. Java's memory model abstracts pointers to prevent developers from directly accessing memory locations, reducing the likelihood of such errors.**\r\n\r\n**Platform Independence: Java aimed to be platform-independent by introducing the concept of a Java Virtual Machine (JVM). Using pointers could complicate the portability of Java programs across di\u0000erent platforms because pointers are highly dependent on the underlying hardware architecture. By abstracting pointers and memory management, Java ensures that programs can run consistently on any platform with a JVM without concerns about memory addresses or pointer sizes.**\r\n\r\n**4.what is JIT compiler in java ?**\r\n\r\n**A just-in-time (JIT) compiler is a program that turns bytecode into instructions that can be sent directly to a computer's processor (CPU). Typically, compilers are key in deciding the speed of an application for developers and end users.**\r\n\r\n**5.Why strings are immutable in Java?**\r\n\r\n**The String is immutable in Java because of the security, synchronization and concurrency, caching, and class loading. The reason of making string final is to destroy the immutability and to** **not allow others to extend it. The String objects are cached in the String pool, and it makes the String immutable.**\r\n\r\n**6.what is a market interface in java ?**\r\n\r\n**A marker interface is an interface that doesn't have any methods or constants inside it. It provides run-time type information about objects, so the compiler and JVM have additional information about the object. A marker interface is also called a tagging interface.**\r\n\r\n**7.can you override a private or static method in java ?**\r\n\r\n**You cannot override a private or static method in Java. If you create a similar method with same return type and same method arguments in child class then it will hide the super class method; this is known as method hiding. Similarly, you cannot override a private method in sub class because it's not accessible there.**\r\n\r\n**No, we cannot override static methods because method overriding is based on dynamic binding at runtime and the static methods are bonded using static binding at compile time.**\r\n\r\n**8.does finally always excute in java ?**\r\n\r\n**Yes, the finally block in Java always executes, regardless of whether an exception is thrown or not. It is used to clean up resources, such as closing files or database connections.**\r\n\r\n**9.what method does the object class have in java ?**\r\n\r\n**The Object class in Java is the root of the class hierarchy. All other classes in Java inherit directly or indirectly from the Object class. The Object class has several methods that are inherited by all other classes, including:**\r\n\r\n**toString() Method.**\r\n\r\n**hashCode() Method.**\r\n\r\n**equals(Object obj) Method. getClass() method.**\r\n\r\n**finalize() method.**\r\n\r\n**clone() method.**\r\n\r\n**wait(), notify() notifyAll() Methods.**\r\n\r\n**10.how can you make a class immutable in java ?**\r\n\r\n**To make a class immutable in Java, you need to follow these general principles:**\r\n\r\n**-Declare the class as final: so it can't be extended.**\r\n\r\n**-Make all of the fields private: so that direct access is not allowed. -Don't provide setter methods: for variables.**\r\n\r\n**-Make all mutable fields final: so that a field's value can be assigned only once.**\r\n\r\n**-Initialize all fields using a constructor method: performing deep copy.**\r\n\r\n**-Perform cloning of objects: in the getter methods to return a copy rather than returning the actual object reference.**\r\n\r\n**public final class ImmutableClass {**\r\n\r\n**private final int value;**\r\n\r\n**public ImmutableClass(int value) {**\r\n\r\n**this.value = value;**\r\n\r\n**}**\r\n\r\n**public int getValue() {**\r\n\r\n**return value;**\r\n\r\n**}**\r\n\r\n**}**\r\n\r\n**11.what is singleton class in java and how can we make a class singleton ?**\r\n\r\n**A singleton class is a design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system. The singleton pattern is often used for resources such as database connections or configuration settings.**\r\n\r\n**There are many ways to implement a singleton class in Java. One common way is to use a private constructor and a static method to get the instance of the class.**\r\n\r\n**For example:**\r\n\r\n**public class Singleton {**\r\n\r\n**private static Singleton instance;**\r\n\r\n**private Singleton() {}**\r\n\r\n**public static Singleton getInstance() {**\r\n\r\n**if (instance == null) {**\r\n\r\n**instance = new Singleton();**\r\n\r\n**}**\r\n\r\n**return instance;**\r\n\r\n**}**\r\n\r\n**}**\r\n\r\n12. **What is a ClassLoader?**\r\n\r\n**A classloader in Java is a subsystem of Java Virtual Machine, dedicated to loading class files when a program is executed; ClassLoader is the first to load the executable file. Java has Bootstrap, Extension, and Application classloaders.**\r\n\r\n13. **what are the memory allocations available in java ?**\r\n\r\n**In Java, memory allocation refers to the process of setting aside virtual memory sections in a program to store variables and instances of classes and structures. The memory isn't allocated to an object at declaration time, but only a reference is created. The new() method is used to allocate memory to the object, so the object is always allocated memory on the heap.**\r\n\r\n**The Memory allocation in java is divided into parts, namely- Heap, Stack, Code, and Static.**\r\n\r\n14. **WILL THE PROGRAM RUN IF I WRITE STATIC PUBLIC VOID MAIN in java ?**\r\n\r\n    **If you write static public void instead of public static void then it**\r\n\r\n    **is perfectly OK. Your Java program will compile and run successfully. It doesn't really make any di\u0000erence as long as method name comes last and return type of method comes second last.**\r\n\r\n15. **what is default value stored in local variable in java ?**\r\n\r\n**There is no default value for local variables, so local variables should be declared and an initial value should be assigned before the first use.**\r\n\r\n16. **What is the Association?**\r\n\r\n**Association in Java is a connection or relation between two separate classes that are set up through their objects. Association relationship indicates how objects know each other and how they are using each other's functionality. It can be one-to-one, one-to-many, many-to-one, and many-to-many.**\r\n\r\n17. **define copy constructor in java ?**\r\n\r\n**A copy constructor is a special type of constructor that allows you to create a new object that is an exact copy of an existing object. It is a very useful feature when you want to create a new object without having to manually copy all of the properties of the existing object.**\r\n\r\n**To define a copy constructor in Java, you simply need to create a constructor that takes the existing object as a parameter and then copies all of its properties to the new object.**\r\n\r\n**The following code shows an example of a copy constructor in Java:**\r\n\r\n**public class MyClass {**\r\n\r\n**private int x;**\r\n\r\n**private int y;**\r\n\r\n**public MyClass(int x, int y) {**\r\n\r\n**this.x = x;**\r\n\r\n**this.y = y;**\r\n\r\n**}**\r\n\r\n**// Copy constructor**\r\n\r\n**public MyClass(MyClass other) {**\r\n\r\n**this.x = other.x;**\r\n\r\n**this.y = other.y;**\r\n\r\n**}**\r\n\r\n**}**\r\n\r\n18. **what is a marker interface in java ?**\r\n\r\n**A marker interface is an interface that doesn't have any methods or constants inside it. It provides run-time type information about objects, so the compiler and JVM have additional information** **about the object. A marker interface is also called a tagging interface.**\r\n\r\n19. **what is object cloning in java ?**\r\n\r\n**Object cloning in Java is the process of creating an exact copy of an object. It is a way to create a duplicate of an object without a\u0000ecting the original object.**\r\n\r\n**To clone an object, you can use the clone() method. The clone() method is a protected method in the Object class. To use it, you must first declare the class as implementing the Cloneable interface.**\r\n\r\n**The following code shows how to clone an object: public class MyClass implements Cloneable {**\r\n\r\n**private int x; private String y;**\r\n\r\n**public MyClass(int x, String y) {**\r\n\r\n**this.x = x;**\r\n\r\n**this.y = y;**\r\n\r\n**}**\r\n\r\n**@Override**\r\n\r\n**public Object clone() throws CloneNotSupportedException {**\r\n\r\n**return super.clone();**\r\n\r\n**}**\r\n\r\n**}**\r\n\r\n**20.What is meant by wrapper class in Java?**\r\n\r\n**In Java, a wrapper class is a class that wraps one or more primitive data types. Wrapper classes are very common in java.** **For example, String, Integer and Boolean are wrapper classes. Wrapper classes are used to treat primitive data types as objects.**\r\n\r\n21. **What is a package in Java?**\r\n\r\n**A Java package is a set of classes, interfaces, and sub-packages that are similar. In Java, it divides packages into two types: built-in packages and user-defined packages. Built-in Packages (packages from the Java API) and User-defined Packages are the two types of packages (create your own packages).**\r\n\r\n22. **What is the di\u0000erence between instance variables and local variables in Java?**\r\n\r\n    **An instance variable is a variable that is declared in a class but outside a method while the local variable is a variable declared within a method or a constructor. Thus, this is the main di\u0000erence between instance variable and local variable.**\r\n\r\n23. **explain java string pool ?**\r\n\r\n**String pool is a storage space in the Java heap memory where string literals are stored. It is also known as String Constant Pool or String Intern Pool. It is privately maintained by the Java String class. By default, the String pool is empty.**\r\n\r\n24. **what is an exception in java ?**\r\n\r\n**Definition: An exception is an event, which occurs during the execution of a program, that disrupts the normal flow of the program's instructions. When an error occurs within a method, the method creates an object and hands it o\u0000 to the runtime system.**\r\n\r\n25. **What is the final keyword in java?**\r\n\r\n**The final keyword is a non-access modifier used for classes, attributes and methods, which makes them non-changeable** **(impossible to inherit or override). The final keyword is useful when you want a variable to always store the same value, like PI (3.14159...). The final keyword is called a \"modifier\".**\r\n\r\n26. **what happens when main isn't declared as static in java ?**\r\n\r\n**If the main method is not declared static, the JVM has to create an instance of the main Class, and because the constructor might be overloaded and include arguments, there will be no reliable and consistent way for the JVM to find the main method in Java.**\r\n\r\n27. **what is jdk? mention the variants of jdk in java .**\r\n\r\n**The Java Development Kit (JDK) is a software development environment that includes the Java Virtual Machine (JVM), Java compiler, and other development tools. It is used to develop Java applications and applets.**\r\n\r\n**The JDK is a collection of tools and libraries needed to develop Java applications. It includes the Java compiler, debugger, and other tools.**\r\n\r\n**Here are some of the most popular variants of the JDK:**\r\n\r\n**Oracle JDK**\r\n\r\n**OpenJDK**\r\n\r\n**IBM JDK**\r\n\r\n**Amazon Corretto**\r\n\r\n**Azul Platform Core (Zulu)**\r\n\r\n**Microsoft Build of OpenJDK**\r\n\r\n**SAPMachine**\r\n\r\n**Azul Platform Prime (Zing)**\r\n\r\n28. **brief access specifiers and its types in java :-**\r\n\r\n**Here are the access specifiers and their types in Java: Public:**\r\n\r\n**Public access specifiers are the most accessible type of access specifier. They can be accessed from anywhere in the program. Protected:**\r\n\r\n**Protected access specifiers are accessible within the same package and to subclasses in other packages.**\r\n\r\n**Private:**\r\n\r\n**Private access specifiers are the least accessible type of access specifier. They can only be accessed within the class in which they are declared.**\r\n\r\n**Default (Package-private):**\r\n\r\n**Default access specifiers are accessible within the same package. They cannot be accessed from outside the package.**\r\n\r\n29. **can a constructor return a value in java ?**\r\n\r\n**No, constructor does not return any value. While declaring a constructor you will not have anything like return type. In general, Constructor is implicitly called at the time of instantiation. And it is not a method, its sole purpose is to initialize the instance variables.**\r\n\r\n30. **What is this keyword in Java?**\r\n\r\n**The keyword 'this' in Java serves a fundamental purpose: it refers to the current object. In other words, 'this' represents the instance of the class where it's used. It's commonly used to access or modify the fields of the current object, especially when field names are the same as local variable names.**\r\n\r\n31. **What is method overloading and method overriding in Java? Definition: Method overloading refers to defining multiple methods with the same name but di\u0000erent parameters within the same class, while method overriding involves creating a method** **in the child class that has the same name, parameters, and return type as a method in the parent class.**\r\n32. **Can We Overload Static Methods In Java?**\r\n\r\n**Yes, we can overload static methods in Java. Method overloading in Java allows us to have multiple methods with the same name in a class, but they must have di\u0000erent parameter lists.**\r\n\r\n33. **Late binding: -**\r\n\r\n**In the late binding or dynamic binding, the compiler doesn't decide the method to be called. Overriding is a perfect example of dynamic binding. In overriding both parent and child classes have the same method.**\r\n\r\n34. **What is a dynamic method dispatch in Java?**\r\n\r\n**Dynamic Method Dispatch in Java is the process by which a call to an overridden method is resolved at runtime (during the code execution). The concept of method overriding is the way to attain runtime polymorphism in Java. During the code execution, JVM decides which implementation of the same method should be called.**\r\n\r\n35. **Why is the delete function faster in the linked list than an array?**\r\n\r\n    **The delete function is generally faster in a linked list than in an array due to the di\u0000erence in data structure. In a linked list, deleting an element involves simply changing the references of the adjacent nodes to bypass the node being deleted.**\r\n\r\n    **The insertion, addition, and removal operations are faster in a LinkedList because there is no resizing of an array done in the background. When a new item is added somewhere in the middle** **of the list, only references in surrounding elements need to change.**\r\n\r\n36. **The life cycle of a thread in Java consists of the following stages:**\r\n\r\n    **-New: A thread is created but not yet started.**\r\n\r\n    **-Runnable: A thread is ready to run, but the scheduler has not selected it to be the running thread.**\r\n\r\n    **-Running: When the thread is executing its task.**\r\n\r\n    **-Blocked: When the thread is waiting for some resource or lock. -Waiting: When the thread is waiting for another thread to perform a particular action without any time limit.**\r\n\r\n    **-Timed Waiting: When the thread is waiting for another thread to perform a particular action for a specified interval of time. -Terminated: When the thread has completed its task or otherwise terminates.**\r\n\r\n37. **brief the life cycle of an applet in java : -**\r\n\r\n**The Applet Life Cycle in Java can be defined as the process of how an applet object is created, started, stopped, and destroyed during the entire execution of the applet. There are mainly five core methods used in the Applet Life Cycle in Java namely, init() start()**\r\n\r\n38. **Why are generics used in Java?**\r\n\r\n**Generics in Java are used to create classes, interfaces, and methods that can work with di\u0000erent types of data. This can help to improve code reusability and reduce the amount of code that needs to be written.**\r\n\r\n39. **Interface Externalizable: -**\r\n\r\n**The writeExternal and readExternal methods of the Externalizable interface are implemented by a class to give the class complete control over the format and contents of the stream for an object and its supertypes. These methods must explicitly coordinate with the supertype to save its state.**\r\n\r\n40. **What is Daemon Thread in Java?**\r\n\r\n**Daemon thread in Java is a low-priority thread that performs background operations such as garbage collection, finalizer, Action Listeners, Signal dispatches, etc. Daemon thread in Java is also a service provider thread that helps the user thread.**\r\n\r\n41. **enumeration in java : -**\r\n\r\n**Enum, introduced in Java 5, is a special data type that consists of a set of pre-defined named values separated by commas. These named values are also known as elements or enumerators or enum instances. Since the values in the enum type are constant, you should always represent them in UPPERCASE letters.**\r\n\r\n42. **why is java is dynamic in nature ?**\r\n\r\n**Java is considered a dynamic language because of its ability to adapt to changing environments and handle unexpected events at runtime. Some of the key features that contribute to Java's dynamic nature include:**\r\n\r\n43. **can you run a code before executing the main method ?**\r\n\r\n**No, main method is the entry point of a Java application. So basically, anything before main() execution is done internally by Java itself, so we explicitely can't hinder those processes. In Java code we use the main () method to start our code so that JVM will search for main () method and starts execution.**\r\n\r\n44. **how many times the finalize method called in java ?**\r\n\r\n**The finalize() method in Java is a method that is called by the garbage collector just before an object is garbage collected. It is a public method that is defined in the Object class. It is not guaranteed that the finalize() method will be called, and it is not recommended to rely on it for critical cleanup operations.**\r\n\r\n45. **can we use this and super together in java ?**\r\n\r\n**No, we cannot use the this() and super() in the same constructor. If we want to use this() or super() inside a constructor, they must be written (executed) at first. Both this() and super() cannot be executed simultaneously, hence “this()” and “super()” in Java cannot be used in the same constructor.**\r\n\r\n46. **What is JSP in Java with example?**\r\n\r\n**JavaServer Page (JSP) is Java's answer to the popular Microsoft's Active Server Pages (ASP). JSP, like ASP, provides a simplified and fast mean to generate dynamic web contents. It allows you to mix static HTML with dynamically generated HTML - in the way that the business logic and the presentation are well separated.**\r\n\r\n47. **JDBC : -**\r\n\r\n**JDBC is a Java database API that was created as an industry standard for making connections between Java applications and other databases. The Java JDBC connection in Java API defines all classes that handle various aspects of the database, such as connection details, result sets, and database metadata.**\r\n\r\n48. **What are the various directives in JSP?**\r\n\r\n**They provide commands or directions to the container on how to deal with and manage certain JSP processing portions. Directives can contain several attributes that are separated by a comma** **and act as key-value pairs. In JSP, directives are described with a pair of <%@ .... %> tags.**\r\n\r\n49. **What is observable and Observer in Java?**\r\n\r\n**Observer : Any object that wishes to be notified when the state of another object changes. Observable : Any object whose state may be of interest, and in whom another object may register an interest.**\r\n\r\n50. **what is session management in java ?**\r\n\r\n**Servlet Session Management is a mechanism in Java used by Web container to store session information. Session tracking is a way to manage the data of a user, this is known as session management in servlet. Session in Java are managed through di\u0000erent ways, such as, HTTP Session API, Cookies, URL rewriting, etc.**\r\n\r\n51. **brief about spring framework in java : -**\r\n\r\n**The Spring Framework is an open-source framework for building enterprise Java applications. Spring aims to simplify the complex and cumbersome enterprise Java application development process by o\u0000ering a framework that includes technologies such as: Aspect-oriented programming (AOP) Dependency injection (DI).**\r\n\r\n52. **What is the JCA program in Java?**\r\n\r\n**The Java Cryptography Architecture (JCA) is a robust set of APIs that provide essential cryptographic functionality for the Java programming language. It is used in various applications, including secure communications, digital signatures, key management, and password authentication.**\r\n\r\n53. **What is meant by JPA in Java?**\r\n\r\n**JPA stands for Java Persistence API. It is an object-relational mapping (ORM) framework that allows us to map Java objects to tables in a relational database.**\r\n\r\n54. **explain the di\u0000erent authentication in java servlets : -**\r\n\r\n**There are four types of authentication available in Servlets:**\r\n\r\n1. **HTTP Basic Authentication:**\r\n\r\n**This is the least secure type of authentication. In this, the server uses the username and password provided by the client and these credentials are transmitted using simple base64 encoding.**\r\n\r\n2. **HTTP Digest Authentication:**\r\n\r\n**This is similar to Basic Authentication, but with an additional precaution to prevent a third party from doing eavesdrop on the http packets and easily read the username and password.**\r\n\r\n3. **HTTPS Client Authentication:**\r\n\r\n**This is a more secure method of authentication than either basic or form-based authentication. It uses HTTP over SSL, in which the server and, optionally, the client authenticate one another using public key certificates.**\r\n\r\n4. **Form-based Authentication:**\r\n\r\n**This is the most secure type of authentication. In this, the user is presented with a login form where they enter their username and password. These credentials are then sent to the server for authentication.**\r\n\r\n55. **how is a java program executed ?**\r\n\r\n**The Java compiler takes the source code and produces bytecode, which is then executed by the Java Virtual Machine (JVM). The bytecode is loaded into the JVM, and the JVM interprets the bytecode and executes the program. The code cannot be compiled** **because of compilation errors. Debugging is mainly done in run-time.**\r\n\r\n56. **How is java platform independent ?**\r\n\r\n**Java is platform-independent because it is compiled to a bytecode that can be run on any device that has a Java Virtual Machine (JVM). This means that you can write a Java program on one platform (such as Windows) and then run it on a di\u0000erent platform (such as macOS or Linux) without making any changes to the code.**\r\n\r\n57. **What are Methods in Java?**\r\n\r\n**A method in Java is a block of code that, when called, performs specific actions mentioned in it. For instance, if you have written instructions to draw a circle in the method, it will do that task. You can insert values or parameters into methods, and they will only be executed when called.**\r\n\r\n58. **what is java main method ?**\r\n\r\n**The Java main method is usually the first method you learn about when you start programming in Java because its the entry point for executing a Java program. The main method can contain code to execute or call other methods, and it can be placed in any class that's part of a program.**\r\n\r\n59. **what is (string args) that always appeared on the java main method ?**\r\n\r\n    **String[]args in Java, i.e., a command line argument array, is used in Java to retrieve input from the console. It is worth noting that, You can access the String args in Java only in static blocks, such as Main. The rest of your system, including any non-static objects, cannot access it.**\r\n\r\n60. **what is a static method ?**\r\n\r\n**A static method (or static function) is a method defined as a member of an object but is accessible directly from an API object's constructor, rather than from an object instance created via the constructor.**\r\n\r\n61. **can we overload the main method in java ?**\r\n\r\n**Yes, we can overload the main() method in Java. A Java class can have any number of overloaded main() methods. But the very first thing JVM (Java Virtual Machine) seeks is the original main() method, i.e., public static void main(String[] args) to execute.**\r\n\r\n62. **what is constructor in java ?**\r\n\r\n**A constructor in Java Programming is a block of code that initializes (constructs) the state and value during object creation. It is called every time an object with the help of a new () keyword is created. Even if you haven't specified any constructor in the code, the Java compiler calls a default constructor.**\r\n\r\n63. **Types of Constructor in Java Default Constructor.**\r\n\r\n    **No-Args constructor. Parameterized constructor.**\r\n\r\n64. **What is the main di\u0000erence between a Constructor and a Method?**\r\n\r\n    **A constructor helps in initializing an object, has no return type and cannot be inherited by subclasses. On the other hand, a method executes operations, returns a value, and can be inherited by subclasses.**\r\n\r\n65. **what is inheritance in java ?**\r\n\r\n**Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object. It is an important part of OOPs (Object Oriented programming system). The idea behind inheritance in Java is that you can create new classes that are built upon existing classes.**\r\n\r\n**In Java, inheritance is implemented using the extends keyword.**\r\n\r\n66. **What is superclass and subclass in Java with example? Subclasses, Superclasses, and Inheritance**\r\n\r\n    **In Java, as in other object-oriented programming languages, classes can be derived from other classes. The derived class (the class that is derived from another class) is called a subclass. The class from which its derived is called the superclass. In fact, in Java, all classes must be derived from some class.**\r\n\r\n67. **what is final variable in java ?**\r\n\r\n**In Java, the final keyword is used to denote constants. It can be used with variables, methods, and classes. Once any entity (variable, method or class) is declared final , it can be assigned only once. That is, the final variable cannot be reinitialized with another value.**\r\n\r\n68. **what are abstract classes in java ?**\r\n\r\n**An abstract class**\r\n\r\n**is a class that cannot be instantiated. It can only be subclassed. Abstract**\r\n\r\n**classes are used to provide a common set of methods and variables for subclasses.**\r\n\r\n**To create an abstract class, you use the abstract keyword.**\r\n\r\n69. **what is the di\u0000erence between jdk,jre and jvm ?**\r\n\r\n**Here are some di\u0000erences between JDK, JRE, and JVM:**\r\n\r\n**JDK:**\r\n\r\n**A software development kit that contains tools for developing, monitoring, and debugging Java code. JDK is primarily used for code execution and development.**\r\n\r\n**JRE:**\r\n\r\n**A software bundle that allows Java programs to run. JRE is a set of software tools designed for running other software. JRE contains class libraries and other supporting files required by JVM for executing Java programs.**\r\n\r\n**JVM:**\r\n\r\n**An environment for executing bytecode.**\r\n\r\n70. **how many types of memory areas are allocated by JVM ?**\r\n\r\n**The Java virtual machine memory area is a runtime area that is used for the execution of various programs involved during runtime of a java application, the memory area of JVM is broadly divided into five di\u0000erent parts which are method area, heap area, Stack, Program counter (PC) registers area and Native method area ..**\r\n\r\n71. **why is main method static in java ?**\r\n\r\n**The main() method is declared static so that JVM can call it without creating an instance of the class containing the main() method. We must declare the main() function static as no class object is present when the java runtime starts. JVM can then load the class into the main memory and invoke the main() method.**\r\n\r\n72. **how is exception handling implemented in java ?**\r\n\r\n**The try-catch is the simplest method of handling exceptions. Put the code you want to run in the try block, and any Java** **exceptions that the code throws are caught by one or more catch blocks. This method will catch any type of Java exceptions that get thrown. This is the simplest mechanism for handling exceptions.**\r\n\r\n73. **can you catch multiple exception in a single catch block in java ?**\r\n\r\n    **Yes, you can catch multiple exceptions in a single catch block in Java. This feature was introduced in Java 7. To do this, you can use the pipe (|) symbol to separate the exception types that you want to catch in the catch block.**\r\n\r\n74. **what are the principles of object oriented programming in java ?**\r\n\r\n    **The main ideas behind Java's Object-Oriented Programming, OOP concepts include abstraction, encapsulation, inheritance and polymorphism. Basically, Java OOP concepts let us create working methods and variables, then re-use all or part of them without compromising security.**\r\n\r\n75. **what are di\u0000erence between abstract class and interface in java ?**\r\n\r\n    **An abstract class comes with non-final variables. A Java interface comes with variables declared final by default. An abstract class in Java includes final, non-final, static, and non-static variables. An interface in Java comes with static and final variables.**\r\n\r\n76. **what are the use of static keyword in java ?**\r\n\r\n**In Java, static keyword is mainly used for memory management. It can be used with variables, methods, blocks and nested classes. It is a keyword which is used to share the same variable or** **method of a given class. Basically, static is used for a constant variable or a method that is same for every instance of a class.**\r\n\r\n77. **what are the use of final keyword in java ?**\r\n\r\n**The final keyword is a non-access modifier used for classes, attributes and methods, which makes them non-changeable (impossible to inherit or override). The final keyword is useful when you want a variable to always store the same value, like PI (3.14159...). The final keyword is called a \"modifier\".**\r\n\r\n78. **what are the di\u0000erence between string, stringbuilder and stringbu\u0000er in java ?**\r\n\r\n    **String is immutable whereas StringBu\u0000er and StringBuilder are mutable classes. StringBu\u0000er is thread-safe and synchronized whereas StringBuilder is not. That's why StringBuilder is faster than StringBu\u0000er.**\r\n\r\n79. **what is the di\u0000erence between == and .equals() method in java ?**\r\n\r\n    **Conclusion: So, the main di\u0000erence between \"==\" and \"equals\" in Java is that \"==\" compares the memory location of two objects, while \"equals\" compares the contents of two objects.**\r\n\r\n80. **What is OOPs Concept?**\r\n\r\n**Object-oriented programming is a core of Java Programming, which is used for designing a program using classes and objects. OOPs, can also be characterized as data controlling for accessing the code.**\r\n\r\n**-inheritance**\r\n\r\n**-encapsulation**\r\n\r\n**-polymorphism**\r\n\r\n**-abstraction**\r\n\r\n81. **what is class and object in java ?**\r\n\r\n**Object − Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors – wagging the tail, barking, eating. An object is an instance of a class. Class − A class can be defined as a template/blueprint that describes the behavior/state that the object of its type support.**\r\n\r\n82. **what is inheritance in java ?**\r\n\r\n**Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object. It is an important part of OOPs (Object Oriented programming system). The idea behind inheritance in Java is that you can create new classes that are built upon existing classes.**\r\n\r\n83. **Types of Inheritance in Java : Single Inheritance.**\r\n\r\n    **Multi-Level Inheritance. Hierarchical Inheritance.**\r\n\r\n    **Hybrid Inheritance.**\r\n\r\n    **\\*Multiple Inheritance.**\r\n\r\n84. **what is polymorphism in java ?**\r\n\r\n**Polymorphism in Java is the task that performs a single action in di\u0000erent ways. So, languages that do not support polymorphism are not 'Object-Oriented Languages', but 'Object-Based Languages'. Ada, for instance, is one such language. Since Java supports polymorphism, it is an Object-Oriented Language.**\r\n\r\n85. **what is encapsulation in java ?**\r\n\r\n**Encapsulation in Java is the process by which data (variables) and the code that acts upon them (methods) are integrated as a** **single unit. By encapsulating a class's variables, other classes cannot access them, and only the methods of the class can access them.**\r\n\r\n86. **what is encapsulation in java ?**\r\n\r\n**Encapsulation in Java is the process by which data (variables) and the code that acts upon them (methods) are integrated as a single unit. By encapsulating a class's variables, other classes cannot access them, and only the methods of the class can access them.**\r\n\r\n87. **what is abstraction in java ?**\r\n\r\n**Abstraction in Java is a process of hiding the implementation details from the user and showing only the functionality to the user. It can be achieved by using abstract classes, methods, and interfaces. An abstract class is a class that cannot be instantiated on its own and is meant to be inherited by concrete classes.**\r\n\r\n89. **public static void main(String[] args) method: -**\r\n\r\n**public: This means that the main method is accessible from anywhere in the program.**\r\n\r\n**static: This means that the main method does not belong to any particular object. It is a class method.**\r\n\r\n**void: This means that the main method does not return any value. main: This is the name of the method.**\r\n\r\n**String[] args: This is an array of strings that can be passed to the main method from the command line.**\r\n\r\n90. **What are the 8 primitive data types in Java?**\r\n\r\n**There are eight built-in primitive data types in Java. They are int, char, byte, short, long, float, double, and boolean.**\r\n\r\n91. **What is an exception in Java?**\r\n\r\n**Definition: An exception is an event, which occurs during the execution of a program, that disrupts the normal flow of the program's instructions.**\r\n\r\n92. **How to make object eligible for Garbage Collection ? Garbage Collection in Java-**\r\n\r\n    **Ways to make an object eligible for garbage collection in Java- By nullifying the reference variable-**\r\n\r\n    **By reassigning the reference variable-**\r\n\r\n    **By creating objects inside a method-**\r\n\r\n    **Island of Isolation-**\r\n\r\n93. **what is meant by java package ?**\r\n\r\n**A set of classes and interfaces grouped together are known as Packages in JAVA. The name itself defines that pack (group) of related types such as classes, sub-packages, enumeration, annotations, and interfaces that provide name-space management. Every class is a part of a certain package.**\r\n\r\n94. **what is user defined method in java ?**\r\n\r\n**In Java, a user-defined method is a block of code that performs a specific task and can be called by other parts of the program. It is a way to modularize code and break down large tasks into smaller, more manageable pieces.**\r\n\r\n95. **What is a NullPointerException in Java?**\r\n\r\n**In Java, a NullPointerException occurs when a variable that is being accessed has not yet been assigned to an object, in other words, the variable is assigned as null.**\r\n\r\n96. **what are jar files in java ?**\r\n\r\n**A JAR file, or Java Archive file, is a file format that is used to aggregate many files into one. It is a package file format that is typically used to aggregate many Java class files and associated metadata and resources (text, images, etc.) into one file for distribution. JAR files are archive files that include a Java-specific manifest file.**\r\n\r\n**JAR files are used to store and distribute Java programs and libraries. They can also be used to store other types of files, such as configuration files and documentation.**\r\n\r\n97. **di\u0000erence between stack and heap memory in java ?**\r\n\r\n**The Java Virtual Machine (JVM) manages memory in two di\u0000erent areas: the stack and the heap. The stack is a LIFO (Last In First Out) data structure that is used to store local variables, method parameters, and return addresses. The heap is a**\r\n\r\n**free-form region of memory that is used to store object instances. The stack is a limited resource, and the JVM will throw a StackOverflowError if a method call causes the stack to overflow. The heap is not limited in size, but the JVM will throw an OutOfMemoryError if there is not enough free memory to allocate an object.**\r\n\r\n98. **what is lambda expression in java ?**\r\n\r\n**Lambda Expressions were added in Java 8. A lambda expression is a short block of code which takes in parameters and returns a value. Lambda expressions are similar to methods, but they do not need a name and they can be implemented right in the body of a method.**\r\n\r\n99. **what is functional interface in java ?**\r\n\r\n**An Interface that contains exactly one abstract method is known as functional interface. It can have any number of default, static** **methods but can contain only one abstract method. It can also declare methods of object class. Functional Interface is also known as Single Abstract Method Interfaces or SAM Interfaces.**\r\n\r\n**100. what is method reference in java 8 ?**\r\n\r\n**Method reference is a new feature introduced in Java 8. It is a compact and easy form of the lambda expression. Method references are a special type of lambda expression. It is used to refer to a method of a functional interface.**\r\n\r\n**There are three types of method references in Java:**\r\n\r\n**-Reference to a static method**\r\n\r\n**-Reference to an instance method of a particular object -Reference to an instance method of an arbitrary object of a particular type**\r\n\r\n**101. Why do we use optional in Java?**\r\n\r\n**Optional can help to prevent NullPointerException errors by making it explicit when a variable may or may not contain a value. This can lead to cleaner and more readable code. Optional provides several methods that can be used to safely work with data that may or may not be present.**\r\n\r\n**102. why stream api is required in java ?**\r\n\r\n**The Stream API is a powerful, but simple to understand set of tools for processing the sequence of elements. When used properly, it allows us to reduce a huge amount of boilerplate code, create more readable programs, and improve an app's productivity.**\r\n\r\n**Use of Stream in Java**\r\n\r\n**Stream API is a way to express and process collections of objects. Enable us to perform operations like filtering, mapping,reducing and sorting.**\r\n\r\n**103. what is collectors in java 8 ?**\r\n\r\n**A Collector is specified by four functions that work together to accumulate entries into a mutable result container, and optionally perform a final transform on the result. They are: creation of a new result container ( supplier() ) incorporating a new data element into a result container ( accumulator() )**\r\n\r\n**Java Stream collect() performs a mutable reduction operation on the elements of the stream. This is a terminal operation.**\r\n\r\n**104. what is the di\u0000erence between map and flatmap in java ? flatMap() is combination of a map() and a flattening operation. However, the di\u0000erence between map and flatmap is that flatmap() maps one input value multiple output values while map() maps to one value. flatMap() is an intermediate operation and return a new Stream or Optional.**\r\n\r\n**105.what is default method in interface in java ?**\r\n\r\n**Default methods enable you to add new functionality to existing interfaces and ensure binary compatibility with code written for older versions of those interfaces. In particular, default methods enable you to add methods that accept lambda expressions as parameters to existing interfaces.**\r\n\r\n**106. What does filter method return in Java 8?**\r\n\r\n**Java stream provides a method filter() to filter stream elements on the basis of given predicate. Suppose you want to get only even elements of your list then you can do this easily with the help** **of filter method. This method takes predicate as an argument and returns a stream of consisting of resulted elements.**\r\n\r\n**107. What are the core API classes for date and time in Java 8? Java 8 Date Time API Classes Examples**\r\n\r\n**LocalDate. LocalDate is an immutable class that represents Date with default format of yyyy-MM-dd. ...**\r\n\r\n**LocalTime. LocalTime is an immutable class whose instance represents a time in the human readable format. ... LocalDateTime. ...**\r\n\r\n**Instant.**\r\n\r\n**108. Can we add static method in interface Java 8?**\r\n\r\n**Java 8 brought a few brand new features to the table, including lambda expressions, functional interfaces, method references, streams, Optional, and static and default methods in interfaces. Prior to Java 8, we could have only method declarations in the interfaces. But from Java 8, we can have default methods and static methods in the interfaces.**\r\n\r\n**109. what is a consumer in java 8 ?**\r\n\r\n**A Consumer is an in-built functional interface in the java.util.function package. It was introduced in Java 8. We use consumers when we need to consume objects, the consumer takes an input value and returns nothing. The consumer interface has two methods:**\r\n\r\n**void accept(T value);**\r\n\r\n**default Consumer<T> andThen(Consumer<? super T> after);**\r\n\r\n**A Consumer is a functional interface that accepts a single input and returns no output. It can be used in all contexts where an object needs to be consumed, i.e. taken as input, and some** **operation is to be performed on the object without returning any result.**\r\n\r\n**110. what are some terminal operation example java 8 ? Terminal Operations: noneMatch, allMatch, collect, findAny, findFirst, anyMatch, toArray, reduce, min, max, forEach, collect, count etc.**\r\n\r\n**111. How to remove duplicates from list in Java 8?**\r\n\r\n**To remove duplicates from a list in Java, you can use a Set data structure. Sets only allow unique elements, so by adding the list to a Set, duplicates will automatically be removed.**\r\n\r\n**112. di\u0000erence between collection API and Strean API ?**\r\n\r\n**A collection is an in-memory data structure, which holds all the values that the data structure currently has—every element in the collection has to be computed before it can be added to the collection. In contrast, a stream is a conceptually fixed data structure in which elements are computed on demand.**\r\n\r\n**113. What is meant by wrapper class in Java?**\r\n\r\n**In Java, a wrapper class is a class that wraps one or more primitive data types. Wrapper classes are very common in java. For example, String, Integer and Boolean are wrapper classes. Wrapper classes are used to treat primitive data types as objects.**\r\n\r\n**114. What is the purpose of final finally and finalize in Java? final is a keyword used in Java to restrict the modification of a variable, method, or class. finally is a block used in Java to ensure that a section of code is always executed, even if an exception is thrown. finalize is a method in Java used to perform cleanup processing on an object before it is garbage collected.**\r\n\r\n**115. what is the di\u0000erence between arraylist and vector in java ? ArrayList is unsynchronized and not thread-safe, whereas Vectors are. Only one thread can call methods on a Vector, which is slightly overhead but helpful when safety is a concern. Therefore, in a single-threaded case, ArrayList is the obvious choice, but where multithreading is concerned, vectors are often preferable.**\r\n\r\n**116. what is the di\u0000erence between hashmap and hashtable in java ?**\r\n\r\n**HashMap allows one null key and values can be null whereas HashTable doesn't allow null key or value. HashMap is faster than HashTable. HashMap iterator is fail-safe where HashTable iterator is not fail-safe. HashMap extends AbstractMap class where HashTable extends Dictionary class.**\r\n\r\n**117. what is runtime polymorphism or dynamic method dispatch in java ?**\r\n\r\n**Runtime polymorphism, also known as the Dynamic Method Dispatch, is a process that resolves a call to an overridden method at runtime. The process involves the use of the reference variable of a superclass to call for an overridden method.**\r\n\r\n**118. can you override a private or static method in java ?**\r\n\r\n**You cannot override a private or static method in Java. If you create a similar method with same return type and same method arguments in child class then it will hide the super class method; this is known as method hiding. Similarly, you cannot override a private method in sub class because it's not accessible there.**\r\n\r\n**119. what is multiple inheritance and does java support ?**\r\n\r\n**Multiple inheritance in java is the capability of creating a single class with multiple superclasses. Unlike some other popular object oriented programming languages like C++, java doesn't provide support for multiple inheritance in classes.**\r\n\r\n**120. What is the di\u0000erence between GET and POST in Java HTTP? Data is transmitted in the header in HTTP GET. In HTTP POST, data is transmitted in the body. HTTP GET is less secure as details are visible in the URL bar. HTTP POST is more secure as details are not displayed in the URL bar.. what is di\u0000erence between get and post method in java?**\r\n\r\n**121. what is multithreading in java?**\r\n\r\n**Multithreading is a programming concept in which the application can create a small unit of tasks to execute in parallel. If you are working on a computer, it runs multiple applications and allocates processing power to them. A simple program runs in sequence and the code statements execute one by one.**\r\n\r\n**122. What is a Thread in Java?**\r\n\r\n**A thread in Java is the direction or path that is taken while a program is being executed. Generally, all the programs have at least one thread, known as the main thread, that is provided by the JVM or Java Virtual Machine at the starting of the program's execution.**\r\n\r\n**123. What are the two ways of implementing thread in Java with example?**\r\n\r\n**Threads in Java can be created in two fundamental ways: by extending the Thread class or by implementing the Runnable interface.**\r\n\r\n**124. how many types of thread are there in java ?**\r\n\r\n**two types**\r\n\r\n**There are two types of threads in an application - user thread and daemon thread. When we start an application, the main is the first user thread created. We can create multiple user threads as well as daemon threads. When all the user threads are executed, JVM terminates the program.**\r\n\r\n**125. what are the di\u0000erence between throw and throws in java ? The throw keyword is used to throw an exception explicitly. It can throw only one exception at a time. The throws keyword can be used to declare multiple exceptions, separated by a comma. Whichever exception occurs, if matched with the declared ones, is thrown automatically then.**\r\n\r\nTHANK-YOU\r\n"}},"__N_SSG":true}